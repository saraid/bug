#!/usr/bin/env ruby

require 'rubygems'
require 'active_resource'
require 'yaml'

COLOR = {
    :clear => "\e[0m",
    :red => "\e[#31m",
    :green => "\e[#32m",
    :yellow => "\e[#33m",
    :blue => "\e[#34m",
    :magenta => "\e[#35m",
    :cyan => "\e[#36m",
    :white => "\e[#37m"
    }

PRIORITY = {
    :low => 3,
    :normal => 4,
    :high => 5,
    :urgent => 6
    }

STATUS = {
    :in_progress => 2,
    :resolved => 3,
    :needs_repro => 4,
    :wontfix => 6
    }

CONFIG_FILE = "#{Dir.home}/.bugsrc"
DIRECTORY = "#{Dir.home}/.bugs"

Dir.mkdir DIRECTORY rescue Errno::EEXIST

command = ARGV.shift
File.open(CONFIG_FILE, 'w') do |f| f.write(YAML.dump({ :user => ARGV[0], :password => ARGV[1], :site => ARGV[2], :user_id => ARGV[3] })) end and exit if command == 'config'

$config = begin
  YAML.load_file(CONFIG_FILE)
rescue Errno::ENOENT
  puts "You don't have a user/pass configured. Use \"bug config [user] [pass] [site]\""
  exit
end
$config[:user_id] ||= 18 # HACK FIXME

EDITOR = $config[:editor] || 'vi'

module FormattedStatus
  def formatted_status
    color = case status.name
      when 'New'
        :red
      when 'Needs Repro'
        :cyan
      when 'In Progress'
        :red
      when 'Resolved'
        :green
      when 'Closed'
        :green
      when 'Will Not Fix'
        :green
    end
    "#{COLOR[color]}#{"%12s" % status.name}#{COLOR[:clear]}"
  end
end

class Issue < ActiveResource::Base
  self.site = $config[:site]
  self.user = $config[:user]
  self.password = $config[:password]
  self.format = ActiveResource::Formats::XmlFormat
end

class Issue
  include FormattedStatus

  def initialize *args
    super(*args)
    ensure_tracked!

    @last_updated = Time.parse updated_on
    @creation_date = Time.parse created_on
    @settings = YAML.load_file(path 'meta') || {}
    serialize!
  end
  attr_reader :last_updated, :creation_date

  def change_status status_id, notes
    puts "Marking Bug ##{self.id} (#{self.subject}) as #{STATUS.invert[status_id].to_s.split('_').collect { |x| x.capitalize }.join(' ')}."
    self.status_id = status_id
    self.notes = notes if notes
    self.save
    serialize!
  end

  def change_priority priority_id, notes
    self.priority_id = priority_id
    self.notes = notes if notes
    self.save
    serialize!
  end

  def uncache!
    Dir.foreach(path) do |filename|
      next if filename =~ /\./
      File.delete(path filename) rescue Errno::ENOENT
    end
    Dir.delete path
  end

  def serialize!
    File.open(path('xml'), 'w') do |f| f.write(to_xml) end
  end

  def to_s
    "#{self.id} #{"%6s" % self.priority.name} #{self.formatted_status} #{self.subject.strip} #{self.tags}"
  end

  def tags
    tags = []
    tags << "[IE]" if ie_bug?
    tags << "[ignoring]" if @settings[:ignore]
    tags.join ' '
  end

  def self.every
    Dir.entries(DIRECTORY).reject { |id| id =~ /\./ }.collect { |id| Issue.load(id) }
  end

  def self.sorted
    self.every.sort { |a, b| b.todo_priority <=> a.todo_priority }
  end

  def self.tracked
    self.every.select { |issue| issue.tracking? }
  end

  def self.category(cat)
    self.every.select { |issue| issue.category == cat }
  end

  def self.fetch sort_type
    issues_found = false
    Issue.find(:all, :params => {
        :assigned_to_id => $config[:user_id],
        :sort => case sort_type
            when 'priority'
              'priority:desc'
            when 'latest'
              'created_on:desc'
            when 'updated'
              'updated_on:desc'
            else
              'priority:desc'
          end,
        :status_id => 'open' }).each do |issue|
      #issue.configure({ :journals_fetched => false })
      break if (sort_type == 'latest' && $config[:last_fetch] && issue.creation_date < $config[:last_fetch]) || 
               (sort_type == 'updated' && $config[:last_update] && issue.last_updated < $config[:last_update])
      issues_found = true
      puts issue
    end
    $config[:last_fetch] = Time.now if sort_type == 'latest'
    $config[:last_update] = Time.now if sort_type == 'updated'
    File.open(CONFIG_FILE, 'w') do |f| f.write(YAML.dump($config)) end

    puts "No new bugs." unless issues_found
  end

  def self.load id
    id = id.to_i
    begin
      new(self.format.decode(File.open([DIRECTORY, id, 'xml'].join('/'), 'r') do |f| f.readlines.join end), true)
    rescue Errno::ENOENT
      self.find(id)
    end
  end

  def configure new_settings
    ensure_tracked!
    @settings = YAML.load_file(path 'meta') || {}
    @settings.merge! new_settings
    File.open(path('meta'), 'w') do |f| f.write(YAML.dump(@settings)) end
  end

  protected
  def since_updated
    Time.now - last_updated
  end

  def path file = nil
    [DIRECTORY, id, file].compact.join('/')
  end

  def ensure_tracked!
    Dir.mkdir path rescue Errno::EEXIST
    system("touch #{path 'notes'}")
    system("touch #{path 'meta'}")
  end

  private
  def method_missing id, *args, &block
    if id == :journals
      return journals if respond_to? :journals
      return [] if id == :journals
    end
    super(id, *args, &block)
  end
end

module Util
  def self.fix_json json, name
    json = json[name]
    return json unless json.is_a? Hash
    json.keys.each do |key|
      json[key] = fix_json json[key], key if json[key].respond_to?(:has_key?) && json[key].has_key?(key)
    end
    json
  end

  def self.attributize hash
    return hash unless hash.is_a? Hash
    hash.keys.each do |key|
      (class << hash; self; end).class_eval do
        define_method key.to_sym do
          hash[key]
        end
      end
      Util.attributize hash[key]
    end
    hash
  end
end

class TodoList < Array
  FILENAME = "#{Dir.home}/.bugs/.todo"

  @@singleton = TodoList.new
  def self.to_a
    @@singleton
  end

  def initialize
    system("touch #{FILENAME}")
    File.open(FILENAME, 'r') { |f| (f.readlines.first || '').split(',') }.each do |id|
      self << id
    end
  end

  def <<(bug)
    bug = bug.id if bug.is_a? Issue # ?
    super(bug)
    self.uniq!
    self.save!
  end

  def delete(bug)
    super(bug)
    self.save!
  end

  def save!
    File.open(FILENAME, 'w') do |f| f.write(self.join(',')) end
  end
end

# Commands:
# - fetch / pull / update: Get a new list from the server.
# - todo?: List all todo items, in todo priority.
# - next?: Return with the next bug to fix.
# - status: List of all tracked bugs, with summaries.
# - filter / category: Same as status, except by category.
# - clear: Untrack all bugs.
# - clean: Untrack all Closed bugs.
# - track / add: (List) Serialize and add to status list.
# - untrack / remove: (List) Remove from status list.

# Bug-level commands:
# - annotate / note: Add a personal note locally.
# - edit: Edit the local personal note.
# - notes: View the local personal note.
# - categorize: Set a local categorization.
# - fixed / nofix / repro / later / comment: Update server with new information.
# - todo / enqueue: Add to local todo list.
# - dequeue: Remove from local todo list.
# - important / unimportant: Located at top of status list.
# - ignore / unignore: Ignored bugs are never Todo and located at the bottom of the status list.
# - postpone: Push a bug downwards.
# - open: Open the Redmine page.
# - info / journals: Display all journals.

# Todo List priority:
# - Marked important locally.
# - Enqueued to Todo List.
# - Prioritized as Urgent / High.
# - Marked  as Severe / Major.
# - Most Journal entries.
# - Most recently updated.

class Issue
  def todo_priority
    priorities = []
    priorities << (@settings[:important] ? 1 : 0)
    priorities << (TodoList.to_a.include?(self.id) ? 1 : 0)
    priorities << self.priority.id
    #priorities << self.custom_fields.first.id # Severity
    priorities << @settings[:journal_length]
    priorities << Math.log10(since_updated)

    multiplier = 1
    priorities.reverse.inject(0) do |memo, num|
      multiplier *= 100
      memo += num.to_f * multiplier
    end
  end

  def resolved?
    ['Resolved', 'Closed', 'Will Not Fix'].include? status.name
  end

  def closed?
    ['Closed', 'Will Not Fix'].include? status.name
  end

  def open?
    ['New', 'In Progress'].include? status.name
  end

  def track!
    configure({ :tracking => true })
    #unless @settings[:journals_fetched]
      #temp = Issue.find(id, :params => { :include => 'journals' })
      #if temp.respond_to? :journals
        #self.journals = temp.journals
        #self.serialize!
      #end
      #configure({ :journals_fetched => true })
    #end
  end

  def untrack!
    configure({ :tracking => false })
  end

  def tracking?
    @settings[:tracking]
  end

  def annotate notes
    ensure_tracked!
    File.open(path('notes'), 'a') do |f| f.puts(notes) end
  end

  def edit!
    ensure_tracked!
    system("#{EDITOR} #{path 'notes'}")
  end

  def notes
    File.open(path('notes'), 'r') do |f| f.readlines.join end
  end

  def categorize! category
    configure({ :category => category })
  end

  def category
    @settings[:category]
  end

  def ie_bug!
    configure({ :ie_bug => true })
  end

  def ie_bug?
    @settings[:ie_bug]
  end

  def important! toggle
    configure({ :important => toggle })
  end

  def ignore! toggle
    configure({ :ignore => toggle })
  end

  def comment! notes
    self.notes = notes
    self.save
  end

  def fixed! notes
    change_status STATUS[:resolved], notes
    pushed_upstream = IO.popen("git log --grep \"BUG.*#{id}\" --oneline origin/master") do |f| f.readlines.length > 0 end
    puts "#{COLOR[:red]}WARNING#{COLOR[:clear]}: Bug #{id} not pushed upstream. Don't forget again." unless pushed_upstream
  end

  def repro! notes
    change_status STATUS[:needs_repro], notes
  end

  def later! notes
    change_status STATUS[:in_progress], notes
  end

  def nofix! notes
    change_status STATUS[:wontfix], notes
  end

  def low! notes
    change_priority PRIORITY[:low], notes
  end

  def normal! notes
    change_priority PRIORITY[:normal], notes
  end

  def high! notes
    change_priority PRIORITY[:high], notes
  end

  def own!
    self.assigned_to_id = $config[:user_id]
    self.save
    serialize!
  end
end

case command
when 'open'
  ARGV.each do |id| system("open #{Issue.site}/issues/#{id}") end
when 'fetch', 'pull'
  Issue.fetch (ARGV[0] || 'priority')
when 'update'
  Issue.fetch 'updated'
when 'todo?'
  Issue.sorted.reject { |issue| issue.resolved? }.each { |issue| puts issue }
when 'next?'
  puts Issue.sorted.reject { |issue| issue.resolved? }.first
when 'postpone'
  puts Issue.sorted[1]
when 'todo', 'enqueue'
  ARGV.each { |id| TodoList.to_a << id }
when 'dequeue'
  ARGV.each { |id| TodoList.to_a.delete id }
when 'status'
  Issue.tracked.each { |issue| puts issue }
when 'mine'
  Issue.load(ARGV[0]).own!
when 'add', 'track'
  ARGV.each { |id| Issue.load(id).track! }
when 'remove', 'untrack'
  ARGV.each { |id| Issue.load(id).untrack! }
when 'clean'
  Issue.every.select { |issue| (ARGV[0] == 'resolved' && issue.resolved?) || issue.closed? }
       .each { |issue| issue.uncache! }
when 'clear'
  Issue.every.each { |issue| issue.untrack! }
when 'categorize'
  Issue.load(ARGV[0]).categorize! ARGV[1]
when 'category', 'filter'
  Issue.category(ARGV[0]).each { |issue| puts issue }
when 'annotate', 'note'
  Issue.load(ARGV[0]).annotate ARGV[1]
when 'edit'
  Issue.load(ARGV[0]).edit!
when 'notes', 'show'
  issue = Issue.load(ARGV[0])
  puts "#{COLOR[:yellow]}#{issue.id} - #{issue.subject}#{COLOR[:clear]}"
  print "\n  Description:"
  puts "\n#{issue.description}".gsub(/\n\n/, "\n").gsub(/\n/, "\n    ")
  unless issue.notes.blank?
    print "\n  Notes:"
    puts "\n#{issue.notes}".gsub(/\n/, "\n    ")
  end
when 'fixed', 'repro', 'later', 'nofix', 'comment', 'low', 'normal', 'high'
  Issue.load(ARGV[0]).send :"#{command}!", ARGV[1]
when 'important', 'unimportant'
  Issue.load(ARGV[0]).important! !(command =~ /^un/)
when 'ignore', 'unignore'
  Issue.load(ARGV[0]).ignore! !(command =~ /^un/)
when 'ie'
  ARGV[0] ? Issue.load(ARGV[0]).ie_bug! : Issue.every.select { |issue| issue.ie_bug? }.each { |issue| puts issue }
when 'sync'
  ARGV.collect { |id| Issue.find(ARGV[0]) }.each { |issue|
    issue.serialize!
    puts issue
  }
#when 'info', 'journals'
  #Issue.load(ARGV[0]).journals.each do |journal| puts journal.notes end
end
